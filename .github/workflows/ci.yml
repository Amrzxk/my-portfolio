name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

env:
  PYTHON_VERSION: '3.13'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: Test Flask application
      run: |
        export FLASK_ENV=testing
        python -m pytest tests/ -v || echo "No tests found - skipping"

    - name: Test application startup
      run: |
        export FLASK_ENV=testing
        timeout 10s python app.py &
        sleep 5
        curl -f http://localhost:5000/ || exit 1
        pkill -f "python app.py"

  docker-build-test:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: lint-and-test
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: portfolio-app:test
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker container
      run: |
        # Start container in background
        docker run -d --name test-container -p 5000:5000 portfolio-app:test
        
        # Wait for container to be ready
        echo "Waiting for container to start..."
        for i in {1..30}; do
          if curl -f http://localhost:5000/ > /dev/null 2>&1; then
            echo "Container is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Container failed to start within 30 seconds"
            docker logs test-container
            exit 1
          fi
          sleep 1
        done
        
        # Test specific endpoints
        echo "Testing endpoints..."
        curl -f http://localhost:5000/ || exit 1
        curl -f http://localhost:5000/api/skills || exit 1
        
        # Test that resume endpoint exists (might 404 without PDF or 302 redirect)
        curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/resume | grep -E "200|302|404" || exit 1

    - name: Test Docker Compose
      run: |
        # Test production compose
        docker compose -f docker-compose.yml config
        
        # Test development compose
        docker compose -f docker-compose.dev.yml config

    - name: Security scan with Trivy
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: 'portfolio-app:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

    - name: Clean up
      if: always()
      run: |
        docker stop test-container || true
        docker rm test-container || true

  build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
